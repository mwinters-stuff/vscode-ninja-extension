name: Release 

# taken as example from the go plugin.

on:
  push:
    tags:
      - v*

jobs:
  release:
    name: create release
    runs-on: ubuntu-latest
    if: github.repository == 'mwinters-stuff/vscode-ninja-extension'

    steps:
      - name: checkout code
        uses: actions/checkout@v2

      - name: get release version
        id: release_version
        run: |
          TAGGED_VERSION="${GITHUB_REF/refs\/tags\/v/}"
          if [[ ! "${TAGGED_VERSION}" =~ ^[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "Invalid version tag '${TAGGED_VERSION}'"
            exit 1
          fi
          echo "EXT_VERSION=${TAGGED_VERSION}" >> $GITHUB_ENV
          WRITTEN_VERSION="$(cat package.json | jq '.version' -r)"
          if [[ "${TAGGED_VERSION}" == *"-"* ]]; then
            # if [[ ! "${TAGGED_VERSION}" == "${WRITTEN_VERSION}"-rc.* ]]; then
            #   echo "Prerelease Tag and Version in package.json are not compatible: '${TAGGED_VERSION}' vs '${WRITTEN_VERSION}'"
            #   exit 1
            # fi
            echo "EXT_ISPREVIEW=1" >> $GITHUB_ENV
          else
          #   if [[ "${TAGGED_VERSION}" != "${WRITTEN_VERSION}" ]]; then
          #     echo "Release Tag and Version in package.json do not match: '${TAGGED_VERSION}' vs '${WRITTEN_VERSION}'"
          #     exit 1
          #   fi
            echo "EXT_ISPREVIEW=0" >> $GITHUB_ENV
          fi
      - name: stamp version
        run: |
          cat package.json | jq --arg VER "${{ env.EXT_VERSION }}" '.version=$VER' > /tmp/package.json 
          cp /tmp/package.json ./package.json
          yarn install
          yarn run vscode:prepublish
      - name: package
        uses: lannonbr/vsce-action@704da577da0f27de5cdb4ae018374c2f08b5f523
        with:
          args: "package"

      - name: create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ env.EXT_VERSION }}
          draft: false
          prerelease: ${{env.EXT_ISPREVIEW == 1}}

      - name: upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ninjabuild-${{ env.EXT_VERSION }}.vsix
          asset_name: ninjabuild-${{ env.EXT_VERSION }}.vsix
          asset_content_type: application/zip

      # - name: publish
      #   if: env.EXT_ISPREVIEW != 1 && github.repository == 'mwinters-stuff/vscode-ninja-extension'
      #   uses: lannonbr/vsce-action@704da577da0f27de5cdb4ae018374c2f08b5f523
      #   with:
      #     args: "publish -p $VSCE_TOKEN"
      #   env:
      #     VSCE_TOKEN: ${{ secrets.VSCE_TOKEN }}

# TODO: check if the commit is in green state. (test-long.yml results)